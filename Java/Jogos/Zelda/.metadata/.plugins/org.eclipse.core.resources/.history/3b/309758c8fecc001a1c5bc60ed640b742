package com.HagekopStudios.entities;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

import com.HagekopStudios.main.Game;
import com.HagekopStudios.world.Camera;
import com.HagekopStudios.world.World;


public class Enemy extends Entity{
	
	//Declaração dos valores inalteraveis
	private static final int maxIndex = 4;
	private static final int maxFrames = 20;
	private static final int speed = 1;
	private static final int maskx = 8;
	private static final int masky = 8;
	private static final int maskw = 10;
	private static final int maskh = 10;
	
	//Declaração dos Arrays dos sprites
	private BufferedImage[] RightEnemy;
	private BufferedImage[] LeftEnemy;
	private BufferedImage[] TopEnemy;
	private BufferedImage[] DownEnemy;
	private BufferedImage[] RightEnemyDamege;
	private BufferedImage[] LeftEnemyDamege;
	private BufferedImage[] TopEnemyDamege;
	private BufferedImage[] DownEnemyDamege;
	
	private int life = 10;
	private int frames = 0;
	private int index = 0;
	private int damageFrames = 10;
	private int damageCurrent = 0;
	
	private boolean right;
	private boolean up;
	private boolean left;
	private boolean down;
	private boolean moved = false;
	private boolean isDamege = false;
	private boolean isDamaged = false;
	

	public Enemy(int x, int y, int width, int height, BufferedImage Spritesheet) {
		super(x, y, width, height, null);
		
		RightEnemy = new BufferedImage[5];
		LeftEnemy = new BufferedImage[5];
		TopEnemy = new BufferedImage[5];
		DownEnemy = new BufferedImage[5];
		RightEnemyDamege = new BufferedImage[5];
		LeftEnemyDamege = new BufferedImage[5];
		TopEnemyDamege = new BufferedImage[5];
		DownEnemyDamege = new BufferedImage[5];
		
		for(int i = 0; i<5;i++) {
			
			RightEnemy[i] = Game.spritesheet.getSprite(160, 80+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			LeftEnemy[i] = Game.spritesheet.getSprite(144, 80+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			TopEnemy[i] = Game.spritesheet.getSprite(112, 80+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			DownEnemy[i] = Game.spritesheet.getSprite(128, 80+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			RightEnemyDamege[i] = Game.spritesheet.getSprite(160, 176+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			LeftEnemyDamege[i] = Game.spritesheet.getSprite(144, 176+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			TopEnemyDamege[i] = Game.spritesheet.getSprite(112, 176+(16*i), 16, 16);
		
		}
		
		
		for(int i = 0; i<5;i++) {
			
			DownEnemyDamege[i] = Game.spritesheet.getSprite(128, 176+(16*i), 16, 16);
		
		}
	}

	public void tick(){
		
		if(!isColiddingWithPlayer()){
		if((int)x < Game.player.getX() && World.isFree((int)(x+speed), this.getY())
				&& !isColidding((int)(x+speed), this.getY())){
			x+=speed;
			left = true;
			this.moved = true;
		}
		else if((int)x > Game.player.getX() && World.isFree((int)(x-speed), this.getY())
				&& !isColidding((int)(x-speed), this.getY())) {
			x-=speed;
			right = true;
			this.moved = true;
		}
		
		if((int)y < Game.player.getY() && World.isFree(this.getX(), (int)(y+speed)) &&
				!isColidding(this.getX(), (int)(y+speed))){
			y+=speed;
			up =true;
			this.moved = true;
		}
		else if((int)y > Game.player.getY() && World.isFree(this.getX(), (int)(y-speed)) &&
				!isColidding(this.getX(), (int)(y-speed))) {
			y-=speed;
			down = true;
			this.moved = true;
		}
		}else{
			//Estamos colidindo
		
				Game.player.life-=Game.rand.nextInt(3);
				Game.player.isDamege = true;
				//System.out.println("Vida: "+ Game.player.life);
			
			
		}
		
		
			frames++;
			if(frames == maxFrames) {
				frames = 0;
				index++;
				if(index > maxIndex)
					index = 0;
			}
			
			System.out.println(index);
						
			if(life <= 0) {
				destroySelf();
				return;
			}
			
			if(isDamaged) {
				this.damageCurrent++;
				if(this.damageCurrent == this.damageFrames) {
					this.damageCurrent = 0;
					this.isDamaged = false;
				}
			}
		
		
	}
	
	public void destroySelf() {
		Game.enemies.remove(this);
		Game.entities.remove(this);
	}
	
	
		
		
	
	
	public boolean isColiddingWithPlayer(){
		Rectangle enemyCurrent = new Rectangle(this.getX() + maskx,this.getY() + masky,maskw,maskh);
		Rectangle player = new Rectangle(Game.player.getX(),Game.player.getY(),16,16);
		
		return enemyCurrent.intersects(player);
	}
	
	public boolean isColidding(int xnext,int ynext){
		Rectangle enemyCurrent = new Rectangle(xnext + maskx,ynext + masky,maskw,maskh);
		for(int i =0; i < Game.enemies.size(); i++){
			Enemy e = Game.enemies.get(i);
			if(e == this)
				continue;
			Rectangle targetEnemy = new Rectangle(e.getX()+ maskx,e.getY()+ masky,maskw,maskh);
			if(enemyCurrent.intersects(targetEnemy)){
				return true;
			}
		}
		
		return false;
	}
	
	public void render(Graphics g) {
		
			if(this.isDamaged) {
				if(right) {
					this.right = false;
					g.drawImage(RightEnemyDamege[index], this.getX() - Camera.x, this.getY() - Camera.y, null);
				}else if(left) {
					this.left = false;
					g.drawImage(LeftEnemyDamege[index],this.getX() - Camera.x, this.getY() - Camera.y,null);
				}else if(up) {
					this.up = false;
					g.drawImage(TopEnemyDamege[index], this.getX()-Camera.x,this.getY() - Camera.y,null);
				}else {
					down = false;
					g.drawImage(DownEnemyDamege[index], this.getX()-Camera.x,this.getY() - Camera.y,null);
				}
			}else {
				if(right) {
					this.right = false;
					g.drawImage(RightEnemy[index], this.getX() - Camera.x, this.getY() - Camera.y, null);
				}else if(left) {
					this.left = false;
					g.drawImage(LeftEnemy[index],this.getX() - Camera.x, this.getY() - Camera.y,null);
				}else if(up) {
					this.up = false;
					g.drawImage(TopEnemy[index], this.getX()-Camera.x,this.getY() - Camera.y,null);
				}else {
					down = false;
					g.drawImage(DownEnemy[index], this.getX()-Camera.x,this.getY() - Camera.y,null);
				}
			}
		
	}
	
	
}
