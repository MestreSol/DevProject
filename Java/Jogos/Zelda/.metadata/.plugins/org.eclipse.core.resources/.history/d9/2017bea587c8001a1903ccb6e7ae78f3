package com.HagekopStudios.world;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import com.HagekopStudios.entities.Enemy;
import com.HagekopStudios.entities.Entity;
import com.HagekopStudios.entities.Lifepack;
import com.HagekopStudios.entities.Muni;
import com.HagekopStudios.entities.Weapon;
import com.HagekopStudios.entities.Weapontwo;
import com.HagekopStudios.main.Game;

public class World {

	private Tile[] tiles;
	public static int WIDTH, HEIGHT;
	public static final int TILE_SIZE = 16;
	public World(String path) {
		try {
			BufferedImage map = ImageIO.read(getClass().getResource(path));
			int[] pixels = new int[map.getWidth()*map.getHeight()];
			tiles = new Tile[map.getWidth()*map.getHeight()];
			WIDTH = map.getWidth();
			HEIGHT = map.getHeight();
			map.getRGB(0, 0, map.getWidth(), map.getHeight(), pixels, 0,map.getWidth());
			for(int xx = 0; xx< map.getWidth(); xx++) {
				
				for(int yy = 0; yy < map.getHeight(); yy++) {
					int pixelA = pixels[xx+(yy*map.getWidth())]; 
					tiles[xx+(yy*WIDTH) ] = new FloorTile(Tile.TILE_FLOOR,xx*16,yy*16);
					if(pixelA == 0xFFFF00DC) {
						Game.player.setX(xx*16);
						Game.player.setY(yy*16);
					}else if(pixelA == 0xFF7F3300) {
						Game.entities.add(new Weapontwo(xx*16,yy*16,16,16,Entity.WEAPONTWO_EN));
					}else if(pixelA == 0xFFFF0000) {
						Game.entities.add(new Enemy(xx*16,yy*16,16,16,Entity.ENEMI_EN));
					}else if(pixelA == 0xFF0094FF) {
					
						Game.entities.add(new Muni(xx*16,yy*16,16,16,Entity.MUNI_EN));
					}else if(pixelA == 0xFFB6FF00) {
						Game.entities.add(new Lifepack(xx*16,yy*16,16,16,Entity.LIFEPACK_EN));
					}else if(pixelA == 0xFFFFFFFF) {
						tiles[xx+(yy*WIDTH) ] = new FloorTile(Tile.TILE_WALL,xx*16,yy*16);
					}else if(pixelA == 0xFF000000) {
					
					}

				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static boolean isFree(int xnext, int ynext) {
		int x1 = xnext / TILE_SIZE
	}
	public void render(Graphics g) {
		int xstart = Camera.x/16;
		int ystart = Camera.y/16;
		
		int xfinal = xstart+Game.WIDTH/16+1;
		int yfinal = ystart+Game.HEIGHT/16+1;
		for(int xx = xstart; xx<xfinal;xx++) {
			for(int yy = ystart;yy <yfinal;yy++) {
				if(xx < 0 || yy<0 || xx>=WIDTH || yy>=HEIGHT) continue;
				Tile tile = tiles[xx+(yy*WIDTH)];
				tile.render(g);
			}
		}
	}
}
